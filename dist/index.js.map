{"version":3,"sources":["../src/useCondition.ts"],"names":["defaultComparator","value","matchValue","conditionIdCounter","useCondition","conditions","i","meta","reset","api","validateChaining","expectedPrevious","operation","lastCondition","condition","error","component","comparator","currentValue","existingFallback","c","defaultComponent","incompleteConditions","conditionCase","fallback","comparators","a","b","pattern","array","min","max","isValidReactNode"],"mappings":"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","file":"index.js","sourcesContent":["import * as React from \"react\";\n\n/**\n * Represents a single condition case in the condition chain\n */\ntype ConditionCase = {\n  /** Type of condition: 'when' for boolean, 'match' for value comparison, 'fallback' for default */\n  type: \"when\" | \"match\" | \"fallback\";\n  /** Boolean result of the condition evaluation */\n  condition?: boolean;\n  /** Value to match against in match-case scenarios */\n  matchValue?: any;\n  /** React component to render when condition is true */\n  component: React.ReactNode | null;\n  /** Unique identifier for debugging purposes */\n  id: string;\n};\n\n/**\n * Function type for custom value comparison in match-case scenarios\n * @param value - The value being matched against\n * @param matchValue - The value to compare with\n * @returns True if values match according to custom logic\n */\ntype MatchComparator = (value: any, matchValue: any) => boolean;\n\n/**\n * Internal metadata for managing condition state\n */\ninterface ConditionMeta {\n  /** Index of the matched condition (-1 if none matched) */\n  matchedIndex: number;\n  /** Value being matched in match-case scenarios */\n  value: any;\n  /** Custom comparator function for value matching */\n  comparator: MatchComparator;\n  /** Whether currently in a match-case chain */\n  isInMatchMode: boolean;\n}\n\n/**\n * API interface for the useCondition hook\n */\ninterface ConditionAPI {\n  /**\n   * Creates a conditional branch based on a boolean condition\n   * @param condition - Boolean condition to evaluate\n   * @returns The condition API for method chaining\n   *\n   * @example\n   * ```tsx\n   * condition.when(isLoading).then(<Spinner />)\n   * ```\n   */\n  when(condition: boolean): ConditionAPI;\n\n  /**\n   * Specifies the component to render when the preceding 'when' condition is true\n   * @param component - React component or element to render\n   * @returns The condition API for method chaining\n   *\n   * @example\n   * ```tsx\n   * condition\n   *   .when(user.isAdmin)\n   *   .then(<AdminPanel />)\n   * ```\n   */\n  then(component: React.ReactNode): ConditionAPI;\n\n  /**\n   * Initiates a match-case chain for value-based conditional rendering\n   * @param value - The value to match against in subsequent case() calls\n   * @param comparator - Optional custom comparison function (defaults to strict equality)\n   * @returns The condition API for method chaining\n   *\n   * @example\n   * ```tsx\n   * // Basic usage\n   * condition.match(userRole).case('admin').render(<AdminDashboard />)\n   *\n   * // With custom comparator\n   * condition\n   *   .match(score, (a, b) => a >= b)\n   *   .case(90).render(<GradeA />)\n   *   .case(80).render(<GradeB />)\n   * ```\n   */\n  match(value: any, comparator?: MatchComparator): ConditionAPI;\n\n  /**\n   * Creates a case branch in a match-case chain\n   * @param matchValue - Value to compare against the matched value\n   * @returns The condition API for method chaining\n   *\n   * @example\n   * ```tsx\n   * condition\n   *   .match(theme)\n   *   .case('dark').render(<DarkTheme />)\n   *   .case('light').render(<LightTheme />)\n   * ```\n   */\n  case(matchValue: any): ConditionAPI;\n\n  /**\n   * Specifies the component to render when the preceding 'case' matches\n   * @param component - React component or element to render\n   * @returns The condition API for method chaining\n   *\n   * @example\n   * ```tsx\n   * condition\n   *   .match(status)\n   *   .case('loading').render(<LoadingSpinner />)\n   *   .case('error').render(<ErrorMessage />)\n   * ```\n   */\n  render(component: React.ReactNode): ConditionAPI;\n\n  /**\n   * Specifies a fallback component when no conditions match\n   * @param component - React component or element to render as fallback\n   * @returns The condition API for method chaining\n   *\n   * @example\n   * ```tsx\n   * condition\n   *   .when(isLoading).then(<Spinner />)\n   *   .when(hasError).then(<Error />)\n   *   .fallback(<MainContent />)\n   * ```\n   */\n  fallback(component: React.ReactNode): ConditionAPI;\n\n  /**\n   * Logs debug information about current conditions to console\n   * @returns The condition API for method chaining\n   *\n   * @example\n   * ```tsx\n   * condition\n   *   .when(isDev).then(<DevTools />)\n   *   .debug() // Logs condition state\n   *   .otherwise()\n   * ```\n   */\n  debug(): ConditionAPI;\n\n  /**\n   * Resets all conditions and state to initial values\n   * @returns The condition API for method chaining\n   *\n   * @example\n   * ```tsx\n   * // Reset between different condition chains\n   * const result1 = condition.when(x).then(<A />).otherwise();\n   * const result2 = condition.reset().when(y).then(<B />).otherwise();\n   * ```\n   */\n  reset(): ConditionAPI;\n\n  /**\n   * Evaluates all conditions and returns the appropriate component\n   * @param defaultComponent - Component to return if no conditions match and no fallback is set\n   * @returns The React component that should be rendered\n   *\n   * @example\n   * ```tsx\n   * // Basic usage\n   * const content = condition\n   *   .when(isLoading).then(<Spinner />)\n   *   .when(hasData).then(<DataView />)\n   *   .otherwise(<EmptyState />);\n   *\n   * // Without default\n   * const content = condition\n   *   .when(showModal).then(<Modal />)\n   *   .otherwise(); // Returns null if no match\n   * ```\n   */\n  otherwise(defaultComponent?: React.ReactNode): React.ReactNode;\n\n  /**\n   * Returns the index of the matched condition\n   * @returns Index of matched condition or -1 if none matched\n   *\n   * @example\n   * ```tsx\n   * const result = condition.when(true).then(<div />).otherwise();\n   * console.log(condition.getMatchedIndex()); // 0\n   * ```\n   */\n  getMatchedIndex(): number;\n\n  /**\n   * Checks if any condition has been matched\n   * @returns True if a condition matched, false otherwise\n   *\n   * @example\n   * ```tsx\n   * condition.when(false).then(<div />).otherwise();\n   * console.log(condition.hasMatched()); // false\n   * ```\n   */\n  hasMatched(): boolean;\n\n  /**\n   * Returns a read-only copy of all current conditions\n   * @returns Frozen array of condition cases\n   *\n   * @example\n   * ```tsx\n   * const conditions = condition\n   *   .when(true).then(<div />)\n   *   .getConditions();\n   * console.log(conditions.length); // 1\n   * ```\n   */\n  getConditions(): readonly ConditionCase[];\n}\n\n/**\n * Default comparator function using strict equality\n */\nconst defaultComparator: MatchComparator = (value, matchValue) => {\n  // Handle NaN comparison\n  if (Number.isNaN(value) && Number.isNaN(matchValue)) return true;\n\n  // Strict equality check\n  return value === matchValue;\n};\n\nlet conditionIdCounter = 0;\n\n/**\n * A React hook for declarative conditional rendering with fluent API\n *\n * Provides a clean, chainable API for complex conditional rendering scenarios,\n * supporting both boolean conditions and value-based matching with custom comparators.\n *\n * @returns {ConditionAPI} Fluent API for building conditional rendering chains\n *\n * @example\n * **Basic When-Then Usage:**\n * ```tsx\n * function UserProfile({ user, isLoading, error }) {\n *   const condition = useCondition();\n *\n *   return condition\n *     .when(isLoading)\n *     .then(<div>Loading user profile...</div>)\n *     .when(error)\n *     .then(<div className=\"error\">Failed to load profile</div>)\n *     .when(!user)\n *     .then(<div>User not found</div>)\n *     .fallback(<UserDetails user={user} />)\n *     .otherwise();\n * }\n * ```\n *\n * @example\n * **Match-Case Usage:**\n * ```tsx\n * function StatusBadge({ status }) {\n *   const condition = useCondition();\n *\n *   return condition\n *     .match(status)\n *     .case('active').render(<span className=\"badge-green\">Active</span>)\n *     .case('inactive').render(<span className=\"badge-gray\">Inactive</span>)\n *     .case('suspended').render(<span className=\"badge-red\">Suspended</span>)\n *     .fallback(<span className=\"badge-blue\">Unknown</span>)\n *     .otherwise();\n * }\n * ```\n *\n * @example\n * **Complex Nested Conditions:**\n * ```tsx\n * function Dashboard({ user, permissions, theme }) {\n *   const condition = useCondition();\n *\n *   const content = condition\n *     // Authentication check\n *     .when(!user)\n *     .then(<LoginForm />)\n *\n *     // Permission-based rendering\n *     .when(user && !permissions.includes('read'))\n *     .then(<AccessDenied />)\n *\n *     // Theme-based rendering\n *     .match(theme)\n *     .case('admin').render(<AdminDashboard user={user} />)\n *     .case('user').render(<UserDashboard user={user} />)\n *\n *     // Default fallback\n *     .fallback(<StandardDashboard user={user} />)\n *     .otherwise();\n *\n *   return <div className=\"dashboard\">{content}</div>;\n * }\n * ```\n *\n * @example\n * **Custom Comparators:**\n * ```tsx\n * function ScoreDisplay({ score }) {\n *   const condition = useCondition();\n *\n *   return condition\n *     .match(score, (current, threshold) => current >= threshold)\n *     .case(90).render(<div className=\"grade-a\">Excellent!</div>)\n *     .case(80).render(<div className=\"grade-b\">Good job!</div>)\n *     .case(70).render(<div className=\"grade-c\">Not bad!</div>)\n *     .case(60).render(<div className=\"grade-d\">Needs improvement</div>)\n *     .fallback(<div className=\"grade-f\">Try harder!</div>)\n *     .otherwise();\n * }\n * ```\n *\n * @example\n * **Using Built-in Comparators:**\n * ```tsx\n * import { useCondition, comparators } from 'use-condition';\n *\n * function SearchResults({ query, results }) {\n *   const condition = useCondition();\n *\n *   return condition\n *     .when(!query.trim())\n *     .then(<div>Enter a search term</div>)\n *\n *     .match(results, comparators.includes)\n *     .case([]).render(<div>No results found</div>)\n *\n *     .when(results.length > 100)\n *     .then(<div>Too many results, please refine your search</div>)\n *\n *     .fallback(<ResultsList results={results} />)\n *     .otherwise();\n * }\n * ```\n *\n * @example\n * **Form Validation:**\n * ```tsx\n * function FormField({ value, errors, touched }) {\n *   const condition = useCondition();\n *\n *   const fieldContent = condition\n *     .when(touched && errors.length > 0)\n *     .then(\n *       <div>\n *         <input value={value} className=\"error\" />\n *         <span className=\"error-text\">{errors[0]}</span>\n *       </div>\n *     )\n *     .when(touched && errors.length === 0)\n *     .then(<input value={value} className=\"success\" />)\n *     .fallback(<input value={value} />)\n *     .otherwise();\n *\n *   return <div className=\"form-field\">{fieldContent}</div>;\n * }\n * ```\n *\n * @example\n * **Debugging and Introspection:**\n * ```tsx\n * function DebugComponent({ condition }) {\n *   const cond = useCondition();\n *\n *   const result = cond\n *     .when(condition > 0)\n *     .then(<div>Positive</div>)\n *     .when(condition < 0)\n *     .then(<div>Negative</div>)\n *     .debug() // Logs condition state to console\n *     .otherwise(<div>Zero</div>);\n *\n *   // Check what matched\n *   console.log('Matched:', cond.hasMatched());\n *   console.log('Matched index:', cond.getMatchedIndex());\n *\n *   return result;\n * }\n * ```\n *\n * @example\n * **Reusable Condition Chains:**\n * ```tsx\n * function useAuthCondition(user) {\n *   const condition = useCondition();\n *\n *   return condition\n *     .when(!user)\n *     .then(<LoginPrompt />)\n *     .when(user && !user.emailVerified)\n *     .then(<EmailVerificationPrompt />)\n *     .when(user && user.suspended)\n *     .then(<AccountSuspendedMessage />);\n * }\n *\n * function ProfilePage({ user }) {\n *   const authCondition = useAuthCondition(user);\n *\n *   return authCondition\n *     .fallback(<UserProfile user={user} />)\n *     .otherwise();\n * }\n * ```\n */\nexport function useCondition(): ConditionAPI {\n  const conditions = React.useRef<ConditionCase[]>([]);\n  const meta = React.useRef<ConditionMeta>({\n    matchedIndex: -1,\n    value: null,\n    comparator: defaultComparator,\n    isInMatchMode: false,\n  });\n\n  // Reset function to clear all state\n  const reset = React.useCallback(() => {\n    conditions.current = [];\n    meta.current = {\n      matchedIndex: -1,\n      value: null,\n      comparator: defaultComparator,\n      isInMatchMode: false,\n    };\n    return api;\n  }, []);\n\n  // Validation helpers\n  const validateChaining = React.useCallback(\n    (expectedPrevious: string, operation: string) => {\n      const lastCondition = conditions.current[conditions.current.length - 1];\n\n      if (!lastCondition) {\n        console.warn(\n          `[useCondition] ${operation} called without a preceding condition. Use 'when()' or 'case()' first.`\n        );\n        return false;\n      }\n\n      if (expectedPrevious === \"when\" && lastCondition.type !== \"when\") {\n        console.warn(\n          `[useCondition] ${operation} should follow 'when()' but found '${lastCondition.type}'.`\n        );\n        return false;\n      }\n\n      if (expectedPrevious === \"case\" && lastCondition.type !== \"match\") {\n        console.warn(\n          `[useCondition] ${operation} should follow 'case()' but found '${lastCondition.type}'.`\n        );\n        return false;\n      }\n\n      return true;\n    },\n    []\n  );\n\n  const api: ConditionAPI = React.useMemo(\n    () => ({\n      when(condition: boolean) {\n        try {\n          if (typeof condition !== \"boolean\") {\n            console.warn(\n              \"[useCondition] when() expects a boolean value. Non-boolean values will be converted using Boolean().\"\n            );\n          }\n\n          conditions.current.push({\n            type: \"when\",\n            condition: Boolean(condition),\n            component: null,\n            id: `when-${++conditionIdCounter}`,\n          });\n        } catch (error) {\n          console.error(\n            \"[useCondition] Error during condition evaluation:\",\n            error\n          );\n        }\n        return api;\n      },\n\n      then(component: React.ReactNode) {\n        if (!validateChaining(\"when\", \"then()\")) {\n          return api;\n        }\n\n        const lastCondition = conditions.current[conditions.current.length - 1];\n        if (lastCondition) {\n          if (lastCondition.component !== null) {\n            console.warn(\n              \"[useCondition] Multiple then() calls detected. Only the last one will be used.\"\n            );\n          }\n          lastCondition.component = component;\n        }\n        return api;\n      },\n\n      match(value: any, comparator: MatchComparator = defaultComparator) {\n        if (meta.current.isInMatchMode) {\n          console.warn(\n            \"[useCondition] Multiple match() calls detected. Previous match context will be overridden.\"\n          );\n        }\n\n        if (typeof comparator !== \"function\") {\n          console.warn(\n            \"[useCondition] comparator must be a function. Using default comparator.\"\n          );\n          comparator = defaultComparator;\n        }\n\n        meta.current.value = value;\n        meta.current.comparator = comparator;\n        meta.current.isInMatchMode = true;\n        return api;\n      },\n\n      case(matchValue: any) {\n        try {\n          if (!meta.current.isInMatchMode) {\n            console.warn(\n              \"[useCondition] case() called without match(). Use match() first to set the value to compare against.\"\n            );\n            return api;\n          }\n\n          const currentValue = meta.current.value;\n          const comparator = meta.current.comparator;\n\n          let condition = false;\n          try {\n            condition = comparator(currentValue, matchValue);\n          } catch (error) {\n            console.error(\n              \"[useCondition] Comparator function threw an error:\",\n              error\n            );\n            condition = false;\n          }\n\n          conditions.current.push({\n            type: \"match\",\n            condition,\n            matchValue,\n            component: null,\n            id: `case-${++conditionIdCounter}`,\n          });\n        } catch (error) {\n          console.error(\n            \"[useCondition] Error during condition evaluation:\",\n            error\n          );\n        }\n        return api;\n      },\n\n      render(component: React.ReactNode) {\n        if (!validateChaining(\"case\", \"render()\")) {\n          return api;\n        }\n\n        const lastCondition = conditions.current[conditions.current.length - 1];\n        if (lastCondition) {\n          if (lastCondition.component !== null) {\n            console.warn(\n              \"[useCondition] Multiple render() calls detected. Only the last one will be used.\"\n            );\n          }\n          lastCondition.component = component;\n        }\n        return api;\n      },\n\n      fallback(component: React.ReactNode) {\n        // Check if fallback already exists\n        const existingFallback = conditions.current.find(\n          (c) => c.type === \"fallback\"\n        );\n        if (existingFallback) {\n          console.warn(\n            \"[useCondition] Multiple fallback() calls detected. Only the last one will be used.\"\n          );\n          existingFallback.component = component;\n        } else {\n          conditions.current.push({\n            type: \"fallback\",\n            component,\n            id: `fallback-${++conditionIdCounter}`,\n          });\n        }\n        return api;\n      },\n\n      debug() {\n        console.group(\"[useCondition] Debug Info\");\n        console.log(\"Conditions:\", conditions.current);\n        console.log(\"Meta:\", meta.current);\n        console.log(\"Matched Index:\", meta.current.matchedIndex);\n        console.groupEnd();\n        return api;\n      },\n\n      reset,\n\n      getMatchedIndex() {\n        return meta.current.matchedIndex;\n      },\n\n      hasMatched() {\n        return meta.current.matchedIndex !== -1;\n      },\n\n      getConditions() {\n        return Object.freeze([...conditions.current]);\n      },\n\n      otherwise(defaultComponent: React.ReactNode = null) {\n        try {\n          // Reset matched index for fresh evaluation\n          meta.current.matchedIndex = -1;\n\n          // Check for incomplete condition chains\n          const incompleteConditions = conditions.current.filter(\n            (c) =>\n              (c.type === \"when\" || c.type === \"match\") && c.component === null\n          );\n\n          if (incompleteConditions.length > 0) {\n            console.warn(\n              `[useCondition] Found ${incompleteConditions.length} incomplete condition(s). These will be ignored.`\n            );\n          }\n\n          // Find first matching condition\n          for (let i = 0; i < conditions.current.length; i++) {\n            const conditionCase = conditions.current[i];\n\n            if (\n              conditionCase &&\n              (conditionCase.type === \"when\" ||\n                conditionCase.type === \"match\") &&\n              conditionCase.condition &&\n              conditionCase.component !== null\n            ) {\n              meta.current.matchedIndex = i;\n              return conditionCase.component;\n            }\n          }\n\n          // Look for fallback\n          const fallback = conditions.current.find(\n            (c) => c.type === \"fallback\"\n          );\n          if (fallback && fallback.component !== null) {\n            return fallback.component;\n          }\n\n          return defaultComponent;\n        } catch (error) {\n          console.error(\n            \"[useCondition] Error during condition evaluation:\",\n            error\n          );\n          return defaultComponent;\n        }\n      },\n    }),\n    [validateChaining, reset]\n  );\n\n  return api;\n}\n\n/**\n * Collection of predefined comparator functions for common comparison scenarios\n *\n * @example\n * ```tsx\n * import { useCondition, comparators } from 'use-condition';\n *\n * function Example({ value, items, text, score }) {\n *   const condition = useCondition();\n *\n *   return condition\n *     // Strict equality (===)\n *     .match(value, comparators.strict)\n *     .case('exact').render(<div>Exact match</div>)\n *\n *     // Loose equality (==)\n *     .match(value, comparators.loose)\n *     .case('123').render(<div>Loose match</div>)\n *\n *     // Deep object comparison\n *     .match(user, comparators.deepEqual)\n *     .case({ id: 1, name: 'John' }).render(<div>User John</div>)\n *\n *     // Regex matching\n *     .match(text, comparators.regex)\n *     .case(/^hello/i).render(<div>Starts with hello</div>)\n *\n *     // Array includes\n *     .match(items, comparators.includes)\n *     .case('targetItem').render(<div>Found target</div>)\n *\n *     // Numeric comparisons\n *     .match(score, comparators.greaterThan)\n *     .case(90).render(<div>High score!</div>)\n *\n *     // Range checking\n *     .match(score, (val, range) => comparators.range(val, range.min, range.max))\n *     .case({ min: 80, max: 100 }).render(<div>Good score range</div>)\n *\n *     .otherwise();\n * }\n * ```\n */\nexport const comparators = {\n  /** Strict equality comparison (===) */\n  strict: (a: any, b: any) => a === b,\n\n  /** Loose equality comparison (==) */\n  loose: (a: any, b: any) => a == b,\n\n  /** Deep object equality using JSON.stringify (note: not suitable for objects with functions) */\n  deepEqual: (a: any, b: any) => JSON.stringify(a) === JSON.stringify(b),\n\n  /** Regular expression matching for strings */\n  regex: (value: string, pattern: RegExp) => pattern.test(value),\n\n  /** Check if array includes a specific value */\n  includes: (array: any[], value: any) =>\n    Array.isArray(array) && array.includes(value),\n\n  /** Numeric greater than comparison */\n  greaterThan: (a: number, b: number) => a > b,\n\n  /** Numeric less than comparison */\n  lessThan: (a: number, b: number) => a < b,\n\n  /** Check if value is within a numeric range (inclusive) */\n  range: (value: number, min: number, max: number) =>\n    value >= min && value <= max,\n} as const;\n\n/**\n * Type guard to check if a value is a valid React node\n *\n * @param value - Value to check\n * @returns True if the value can be rendered by React\n *\n * @example\n * ```tsx\n * import { isValidReactNode } from 'use-condition';\n *\n * function SafeRender({ content }) {\n *   if (isValidReactNode(content)) {\n *     return <div>{content}</div>;\n *   }\n *   return <div>Invalid content</div>;\n * }\n * ```\n */\nexport const isValidReactNode = (value: any): value is React.ReactNode => {\n  return (\n    value === null ||\n    value === undefined ||\n    typeof value === \"string\" ||\n    typeof value === \"number\" ||\n    typeof value === \"boolean\" ||\n    React.isValidElement(value) ||\n    Array.isArray(value)\n  );\n};\n"]}